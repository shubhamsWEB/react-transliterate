{"version":3,"sources":["languages.ts","../../src/styles.module.css","../../src/constants/TriggerKeys.ts","../../src/util/suggestions-util.ts","../../src/index.tsx","../../src/util/caret-util.ts","../../src/util/touch-util.ts","App.tsx","index.tsx"],"names":["languages","label","value","word","config","numOptions","showCurrentWordAsLastSuggestion","lang","url","fetch","res","json","data","found","console","error","renderComponent","props","offsetX","offsetY","onChange","onChangeText","onBlur","onKeyDown","containerClassName","containerStyles","activeItemStyles","maxOptions","hideSuggestionBoxOnMobileDevices","hideSuggestionBoxBreakpoint","triggerKeys","insertCurrentSelectionOnBlur","enabled","rest","options","setOptions","left","setLeft","top","setTop","selection","setSelection","matchStart","setMatchStart","matchEnd","setMatchEnd","inputRef","width","height","windowSize","setWindowSize","shouldRenderSuggestions","reset","handleSelection","index","currentString","newValue","substring","length","setTimeout","elem","caretPos","current","selectionStart","focus","setSelectionRange","e","target","renderSuggestions","lastWord","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","style","position","className","currentTarget","el","caret","selectionEnd","start","end","input","indexOfLastSpace","lastIndexOf","currentWord","slice","rect","getBoundingClientRect","Math","min","event","includes","keyCode","preventDefault","navigator","maxTouchPoints","msMaxTouchPoints","ref","ReactTransliterate","Array","from","Set","map","item","Active","undefined","onMouseEnter","onClick","App","useState","text","setText","setLang","l","htmlFor","placeholder","id","Input","fullWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57479e51.chunk.js","sourcesContent":["export const languages = [\n  { label: \"Amharic\", value: \"am\" },\n  { label: \"Arabic\", value: \"ar\" },\n  { label: \"Bangla\", value: \"bn\" },\n  { label: \"Belarusian\", value: \"be\" },\n  { label: \"Bulgarian\", value: \"bg\" },\n  { label: \"Chinese (Hong Kong)\", value: \"yue-hant\" },\n  { label: \"Chinese (Simplified)\", value: \"zh\" },\n  { label: \"Chinese (Traditional)\", value: \"zh-hant\" },\n  { label: \"French\", value: \"fr\" },\n  { label: \"German\", value: \"de\" },\n  { label: \"Greek\", value: \"el\" },\n  { label: \"Gujarati\", value: \"gu\" },\n  { label: \"Hebrew\", value: \"he\" },\n  { label: \"Hindi\", value: \"hi\" },\n  { label: \"Italian\", value: \"it\" },\n  { label: \"Japanese\", value: \"ja\" },\n  { label: \"Kannada\", value: \"kn\" },\n  { label: \"Malayalam\", value: \"ml\" },\n  { label: \"Marathi\", value: \"mr\" },\n  { label: \"Nepali\", value: \"ne\" },\n  { label: \"Odia\", value: \"or\" },\n  { label: \"Persian\", value: \"fa\" },\n  { label: \"Portuguese (Brazil)\", value: \"pt\" },\n  { label: \"Punjabi\", value: \"pa\" },\n  { label: \"Russian\", value: \"ru\" },\n  { label: \"Sanskrit\", value: \"sa\" },\n  { label: \"Serbian\", value: \"sr\" },\n  { label: \"Sinhala\", value: \"si\" },\n  { label: \"Spanish\", value: \"es\" },\n  { label: \"Tamil\", value: \"ta\" },\n  { label: \"Telugu\", value: \"te\" },\n  { label: \"Tigrinya\", value: \"ti\" },\n  { label: \"Ukrainian\", value: \"uk\" },\n  { label: \"Urdu\", value: \"ur\" },\n  { label: \"Vietnamese\", value: \"vi\" },\n];\n",null,"export const TriggerKeys = {\n  KEY_RETURN: 13,\n  KEY_ENTER: 14,\n  KEY_TAB: 9,\n  KEY_SPACE: 32,\n};\n","import { Language } from \"../types/Language\";\n\ntype Config = {\n  numOptions?: number;\n  showCurrentWordAsLastSuggestion?: boolean;\n  lang?: Language;\n};\n\nexport const getTransliterateSuggestions = async (\n  word: string,\n  config?: Config,\n): Promise<string[]> => {\n  const { numOptions, showCurrentWordAsLastSuggestion, lang } = config || {\n    numOptions: 5,\n    showCurrentWordAsLastSuggestion: true,\n    lang: \"hi\",\n  };\n  // fetch suggestion from api\n  // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${word}`;\n\n  const url = `https://inputtools.google.com/request?text=${word}&itc=${lang}-t-i0-und&num=${numOptions}&cp=0&cs=1&ie=utf-8&oe=utf-8&app=demopage`;\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    if (data && data[0] === \"SUCCESS\") {\n      const found = showCurrentWordAsLastSuggestion\n        ? [...data[1][0][1], word]\n        : data[1][0][1];\n      return found;\n    } else {\n      if (showCurrentWordAsLastSuggestion) {\n        return [word];\n      }\n      return [];\n    }\n  } catch (e) {\n    // catch error\n    console.error(\"There was an error with transliteration\", e);\n    return [];\n  }\n};\n","import * as React from \"react\";\nimport { useEffect, useRef, useState, useMemo } from \"react\";\nimport { setCaretPosition, getInputSelection, isTouchEnabled } from \"./util\";\nimport getCaretCoordinates from \"textarea-caret\";\nimport classes from \"./styles.module.css\";\nimport { ReactTransliterateProps } from \"./interfaces/Props\";\nimport { Language } from \"./types/Language\";\nimport { TriggerKeys } from \"./constants/TriggerKeys\";\nimport { getTransliterateSuggestions } from \"./util/suggestions-util\";\n\nconst KEY_UP = 38;\nconst KEY_DOWN = 40;\nconst KEY_ESCAPE = 27;\n\nconst OPTION_LIST_Y_OFFSET = 10;\nconst OPTION_LIST_MIN_WIDTH = 100;\n\nexport const ReactTransliterate = ({\n  renderComponent = (props) => <input {...props} />,\n  lang = \"hi\",\n  offsetX = 0,\n  offsetY = 10,\n  onChange,\n  onChangeText,\n  onBlur,\n  value,\n  onKeyDown,\n  containerClassName = \"\",\n  containerStyles = {},\n  activeItemStyles = {},\n  maxOptions = 5,\n  hideSuggestionBoxOnMobileDevices = false,\n  hideSuggestionBoxBreakpoint = 450,\n  triggerKeys = [\n    TriggerKeys.KEY_SPACE,\n    TriggerKeys.KEY_ENTER,\n    TriggerKeys.KEY_RETURN,\n    TriggerKeys.KEY_TAB,\n  ],\n  insertCurrentSelectionOnBlur = true,\n  showCurrentWordAsLastSuggestion = true,\n  enabled = true,\n  ...rest\n}: ReactTransliterateProps): JSX.Element => {\n  const [options, setOptions] = useState<string[]>([]);\n  const [left, setLeft] = useState(0);\n  const [top, setTop] = useState(0);\n  const [selection, setSelection] = useState<number>(0);\n  const [matchStart, setMatchStart] = useState(-1);\n  const [matchEnd, setMatchEnd] = useState(-1);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\n\n  const shouldRenderSuggestions = useMemo(\n    () =>\n      hideSuggestionBoxOnMobileDevices\n        ? windowSize.width > hideSuggestionBoxBreakpoint\n        : true,\n    [windowSize, hideSuggestionBoxBreakpoint, hideSuggestionBoxOnMobileDevices],\n  );\n\n  const reset = () => {\n    // reset the component\n    setSelection(0);\n    setOptions([]);\n  };\n\n  const handleSelection = (index: number) => {\n    const currentString = value;\n    // create a new string with the currently typed word\n    // replaced with the word in transliterated language\n    const newValue =\n      currentString.substring(0, matchStart) +\n      options[index] +\n      \" \" +\n      currentString.substring(matchEnd + 1, currentString.length);\n\n    // set the position of the caret (cursor) one character after the\n    // the position of the new word\n    setTimeout(() => {\n      setCaretPosition(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        inputRef.current!,\n        matchStart + options[index].length + 1,\n      );\n    }, 1);\n\n    // bubble up event to the parent component\n    const e = {\n      target: { value: newValue },\n    } as unknown as React.FormEvent<HTMLInputElement>;\n    onChangeText(newValue);\n    onChange && onChange(e);\n    reset();\n    return inputRef.current?.focus();\n  };\n\n  const renderSuggestions = async (lastWord: string) => {\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n    // fetch suggestion from api\n    // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${lastWord}`;\n\n    const numOptions = showCurrentWordAsLastSuggestion\n      ? maxOptions - 1\n      : maxOptions;\n\n    const data = await getTransliterateSuggestions(lastWord, {\n      numOptions,\n      showCurrentWordAsLastSuggestion,\n      lang,\n    });\n    setOptions(data);\n  };\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n\n    // bubble up event to the parent component\n    onChange && onChange(e);\n    onChangeText(value);\n\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n\n    // get the current index of the cursor\n    const caret = getInputSelection(e.target as HTMLInputElement).end;\n    const input = inputRef.current;\n\n    if (!input) return;\n\n    const caretPos = getCaretCoordinates(input, caret);\n\n    // search for the last occurence of the space character from\n    // the cursor\n    const indexOfLastSpace =\n      value.lastIndexOf(\" \", caret - 1) < value.lastIndexOf(\"\\n\", caret - 1)\n        ? value.lastIndexOf(\"\\n\", caret - 1)\n        : value.lastIndexOf(\" \", caret - 1);\n\n    // first character of the currently being typed word is\n    // one character after the space character\n    // index of last character is one before the current position\n    // of the caret\n    setMatchStart(indexOfLastSpace + 1);\n    setMatchEnd(caret - 1);\n\n    // currentWord is the word that is being typed\n    const currentWord = value.slice(indexOfLastSpace + 1, caret);\n    if (currentWord && enabled) {\n      // make an api call to fetch suggestions\n      renderSuggestions(currentWord);\n\n      const rect = input.getBoundingClientRect();\n\n      // calculate new left and top of the suggestion list\n\n      // minimum of the caret position in the text input and the\n      // width of the text input\n      const left = Math.min(\n        caretPos.left,\n        rect.width - OPTION_LIST_MIN_WIDTH / 2,\n      );\n\n      // minimum of the caret position from the top of the input\n      // and the height of the input\n      const top = Math.min(caretPos.top + OPTION_LIST_Y_OFFSET, rect.height);\n\n      setTop(top);\n      setLeft(left);\n    } else {\n      reset();\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const helperVisible = options.length > 0;\n\n    if (helperVisible) {\n      if (triggerKeys.includes(event.keyCode)) {\n        event.preventDefault();\n        handleSelection(selection);\n      } else {\n        switch (event.keyCode) {\n          case KEY_ESCAPE:\n            event.preventDefault();\n            reset();\n            break;\n          case KEY_UP:\n            event.preventDefault();\n            setSelection((options.length + selection - 1) % options.length);\n            break;\n          case KEY_DOWN:\n            event.preventDefault();\n            setSelection((selection + 1) % options.length);\n            break;\n          default:\n            onKeyDown && onKeyDown(event);\n            break;\n        }\n      }\n    } else {\n      onKeyDown && onKeyDown(event);\n    }\n  };\n\n  const handleBlur = (\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (!isTouchEnabled()) {\n      if (insertCurrentSelectionOnBlur && options[selection]) {\n        handleSelection(selection);\n      } else {\n        reset();\n      }\n    }\n    onBlur && onBlur(event);\n  };\n\n  const handleResize = () => {\n    // TODO implement the resize function to resize\n    // the helper on screen size change\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  return (\n    <div\n      // position relative is required to show the component\n      // in the correct position\n      style={{\n        ...containerStyles,\n        position: \"relative\",\n      }}\n      className={containerClassName}\n    >\n      {renderComponent({\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        onBlur: handleBlur,\n        ref: inputRef,\n        value: value,\n        \"data-testid\": \"rt-input-component\",\n        ...rest,\n      })}\n      {shouldRenderSuggestions && options.length > 0 && (\n        <ul\n          style={{\n            left: `${left + offsetX}px`,\n            top: `${top + offsetY}px`,\n            position: \"absolute\",\n            width: \"auto\",\n          }}\n          className={classes.ReactTransliterate}\n          data-testid=\"rt-suggestions-list\"\n        >\n          {/*\n           * convert to set and back to prevent duplicate list items\n           * that might happen while using backspace\n           */}\n          {Array.from(new Set(options)).map((item, index) => (\n            <li\n              className={index === selection ? classes.Active : undefined}\n              style={index === selection ? activeItemStyles || {} : {}}\n              onMouseEnter={() => {\n                setSelection(index);\n              }}\n              onClick={() => handleSelection(index)}\n              key={item}\n            >\n              {item}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport type { ReactTransliterateProps, Language };\nexport { TriggerKeys, getTransliterateSuggestions };\n","export function getInputSelection(el: HTMLInputElement) {\n  const start = 0;\n  const end = 0;\n\n  if (!el) {\n    return { start, end };\n  }\n\n  if (\n    typeof el.selectionStart === \"number\" &&\n    typeof el.selectionEnd === \"number\"\n  ) {\n    return { start: el.selectionStart, end: el.selectionEnd };\n  }\n\n  return { start, end };\n}\n\nexport function setCaretPosition(elem: HTMLInputElement, caretPos: number) {\n  if (elem) {\n    if (elem.selectionStart) {\n      elem.focus();\n      elem.setSelectionRange(caretPos, caretPos);\n    } else {\n      elem.focus();\n    }\n  }\n}\n","export function isTouchEnabled() {\n  return (\n    \"ontouchstart\" in window ||\n    navigator.maxTouchPoints > 0 ||\n    navigator.msMaxTouchPoints > 0\n  );\n}\n","import React, { useState } from \"react\";\n\n// language list for example only\nimport { languages } from \"./languages\";\n\n// import component\nimport { ReactTransliterate, Language } from \"react-transliterate\";\nimport \"react-transliterate/dist/index.css\";\n\n// Material Ui input component\nimport Input from \"@material-ui/core/Input\";\n\nconst App = () => {\n  const [text, setText] = useState(\"\");\n\n  const [lang, setLang] = useState<Language>(\"hi\");\n\n  return (\n    <div className=\"container\">\n      <h2>React transliterate</h2>\n\n      <select\n        className=\"language-dropdown\"\n        value={lang}\n        onChange={(e) => setLang(e.target.value as Language)}\n      >\n        {languages.map((l) => (\n          <option key={l.value} value={l.value}>\n            {l.label}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-input\">Using input</label>\n      <ReactTransliterate\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-input\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-textarea\">Using textarea</label>\n      <ReactTransliterate\n        renderComponent={(props) => <textarea {...props} />}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-textarea\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-material-ui-input\">\n        Using Material UI input\n      </label>\n      <ReactTransliterate\n        renderComponent={(props) => {\n          const inputRef = props.ref;\n\n          delete props[\"ref\"];\n\n          return <Input fullWidth {...props} inputRef={inputRef} />;\n        }}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-material-ui-input\"\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}